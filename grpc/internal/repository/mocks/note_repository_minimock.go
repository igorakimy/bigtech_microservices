// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/igorakimy/bigtech_microservices/internal/repository.NoteRepository -o note_repository_minimock.go -n NoteRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/igorakimy/bigtech_microservices/internal/model"
)

// NoteRepositoryMock implements repository.NoteRepository
type NoteRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, info *model.NoteInfo) (i1 int64, err error)
	inspectFuncCreate   func(ctx context.Context, info *model.NoteInfo)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mNoteRepositoryMockCreate

	funcDelete          func(ctx context.Context, id int64) (err error)
	inspectFuncDelete   func(ctx context.Context, id int64)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mNoteRepositoryMockDelete

	funcGet          func(ctx context.Context, id int64) (np1 *model.Note, err error)
	inspectFuncGet   func(ctx context.Context, id int64)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mNoteRepositoryMockGet

	funcList          func(ctx context.Context) (na1 []model.Note, err error)
	inspectFuncList   func(ctx context.Context)
	afterListCounter  uint64
	beforeListCounter uint64
	ListMock          mNoteRepositoryMockList

	funcUpdate          func(ctx context.Context, id int64, info *model.UpdateNoteInfo) (err error)
	inspectFuncUpdate   func(ctx context.Context, id int64, info *model.UpdateNoteInfo)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mNoteRepositoryMockUpdate
}

// NewNoteRepositoryMock returns a mock for repository.NoteRepository
func NewNoteRepositoryMock(t minimock.Tester) *NoteRepositoryMock {
	m := &NoteRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mNoteRepositoryMockCreate{mock: m}
	m.CreateMock.callArgs = []*NoteRepositoryMockCreateParams{}

	m.DeleteMock = mNoteRepositoryMockDelete{mock: m}
	m.DeleteMock.callArgs = []*NoteRepositoryMockDeleteParams{}

	m.GetMock = mNoteRepositoryMockGet{mock: m}
	m.GetMock.callArgs = []*NoteRepositoryMockGetParams{}

	m.ListMock = mNoteRepositoryMockList{mock: m}
	m.ListMock.callArgs = []*NoteRepositoryMockListParams{}

	m.UpdateMock = mNoteRepositoryMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*NoteRepositoryMockUpdateParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mNoteRepositoryMockCreate struct {
	mock               *NoteRepositoryMock
	defaultExpectation *NoteRepositoryMockCreateExpectation
	expectations       []*NoteRepositoryMockCreateExpectation

	callArgs []*NoteRepositoryMockCreateParams
	mutex    sync.RWMutex
}

// NoteRepositoryMockCreateExpectation specifies expectation struct of the NoteRepository.Create
type NoteRepositoryMockCreateExpectation struct {
	mock    *NoteRepositoryMock
	params  *NoteRepositoryMockCreateParams
	results *NoteRepositoryMockCreateResults
	Counter uint64
}

// NoteRepositoryMockCreateParams contains parameters of the NoteRepository.Create
type NoteRepositoryMockCreateParams struct {
	ctx  context.Context
	info *model.NoteInfo
}

// NoteRepositoryMockCreateResults contains results of the NoteRepository.Create
type NoteRepositoryMockCreateResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for NoteRepository.Create
func (mmCreate *mNoteRepositoryMockCreate) Expect(ctx context.Context, info *model.NoteInfo) *mNoteRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("NoteRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &NoteRepositoryMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &NoteRepositoryMockCreateParams{ctx, info}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the NoteRepository.Create
func (mmCreate *mNoteRepositoryMockCreate) Inspect(f func(ctx context.Context, info *model.NoteInfo)) *mNoteRepositoryMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for NoteRepositoryMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by NoteRepository.Create
func (mmCreate *mNoteRepositoryMockCreate) Return(i1 int64, err error) *NoteRepositoryMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("NoteRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &NoteRepositoryMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &NoteRepositoryMockCreateResults{i1, err}
	return mmCreate.mock
}

// Set uses given function f to mock the NoteRepository.Create method
func (mmCreate *mNoteRepositoryMockCreate) Set(f func(ctx context.Context, info *model.NoteInfo) (i1 int64, err error)) *NoteRepositoryMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the NoteRepository.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the NoteRepository.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the NoteRepository.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mNoteRepositoryMockCreate) When(ctx context.Context, info *model.NoteInfo) *NoteRepositoryMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("NoteRepositoryMock.Create mock is already set by Set")
	}

	expectation := &NoteRepositoryMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &NoteRepositoryMockCreateParams{ctx, info},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up NoteRepository.Create return parameters for the expectation previously defined by the When method
func (e *NoteRepositoryMockCreateExpectation) Then(i1 int64, err error) *NoteRepositoryMock {
	e.results = &NoteRepositoryMockCreateResults{i1, err}
	return e.mock
}

// Create implements repository.NoteRepository
func (mmCreate *NoteRepositoryMock) Create(ctx context.Context, info *model.NoteInfo) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, info)
	}

	mm_params := NoteRepositoryMockCreateParams{ctx, info}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := NoteRepositoryMockCreateParams{ctx, info}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("NoteRepositoryMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the NoteRepositoryMock.Create")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, info)
	}
	mmCreate.t.Fatalf("Unexpected call to NoteRepositoryMock.Create. %v %v", ctx, info)
	return
}

// CreateAfterCounter returns a count of finished NoteRepositoryMock.Create invocations
func (mmCreate *NoteRepositoryMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of NoteRepositoryMock.Create invocations
func (mmCreate *NoteRepositoryMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to NoteRepositoryMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mNoteRepositoryMockCreate) Calls() []*NoteRepositoryMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*NoteRepositoryMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *NoteRepositoryMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *NoteRepositoryMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NoteRepositoryMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NoteRepositoryMock.Create")
		} else {
			m.t.Errorf("Expected call to NoteRepositoryMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to NoteRepositoryMock.Create")
	}
}

type mNoteRepositoryMockDelete struct {
	mock               *NoteRepositoryMock
	defaultExpectation *NoteRepositoryMockDeleteExpectation
	expectations       []*NoteRepositoryMockDeleteExpectation

	callArgs []*NoteRepositoryMockDeleteParams
	mutex    sync.RWMutex
}

// NoteRepositoryMockDeleteExpectation specifies expectation struct of the NoteRepository.Delete
type NoteRepositoryMockDeleteExpectation struct {
	mock    *NoteRepositoryMock
	params  *NoteRepositoryMockDeleteParams
	results *NoteRepositoryMockDeleteResults
	Counter uint64
}

// NoteRepositoryMockDeleteParams contains parameters of the NoteRepository.Delete
type NoteRepositoryMockDeleteParams struct {
	ctx context.Context
	id  int64
}

// NoteRepositoryMockDeleteResults contains results of the NoteRepository.Delete
type NoteRepositoryMockDeleteResults struct {
	err error
}

// Expect sets up expected params for NoteRepository.Delete
func (mmDelete *mNoteRepositoryMockDelete) Expect(ctx context.Context, id int64) *mNoteRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("NoteRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &NoteRepositoryMockDeleteExpectation{}
	}

	mmDelete.defaultExpectation.params = &NoteRepositoryMockDeleteParams{ctx, id}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the NoteRepository.Delete
func (mmDelete *mNoteRepositoryMockDelete) Inspect(f func(ctx context.Context, id int64)) *mNoteRepositoryMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for NoteRepositoryMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by NoteRepository.Delete
func (mmDelete *mNoteRepositoryMockDelete) Return(err error) *NoteRepositoryMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("NoteRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &NoteRepositoryMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &NoteRepositoryMockDeleteResults{err}
	return mmDelete.mock
}

// Set uses given function f to mock the NoteRepository.Delete method
func (mmDelete *mNoteRepositoryMockDelete) Set(f func(ctx context.Context, id int64) (err error)) *NoteRepositoryMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the NoteRepository.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the NoteRepository.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the NoteRepository.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mNoteRepositoryMockDelete) When(ctx context.Context, id int64) *NoteRepositoryMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("NoteRepositoryMock.Delete mock is already set by Set")
	}

	expectation := &NoteRepositoryMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &NoteRepositoryMockDeleteParams{ctx, id},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up NoteRepository.Delete return parameters for the expectation previously defined by the When method
func (e *NoteRepositoryMockDeleteExpectation) Then(err error) *NoteRepositoryMock {
	e.results = &NoteRepositoryMockDeleteResults{err}
	return e.mock
}

// Delete implements repository.NoteRepository
func (mmDelete *NoteRepositoryMock) Delete(ctx context.Context, id int64) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, id)
	}

	mm_params := NoteRepositoryMockDeleteParams{ctx, id}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, &mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_got := NoteRepositoryMockDeleteParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("NoteRepositoryMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the NoteRepositoryMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, id)
	}
	mmDelete.t.Fatalf("Unexpected call to NoteRepositoryMock.Delete. %v %v", ctx, id)
	return
}

// DeleteAfterCounter returns a count of finished NoteRepositoryMock.Delete invocations
func (mmDelete *NoteRepositoryMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of NoteRepositoryMock.Delete invocations
func (mmDelete *NoteRepositoryMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to NoteRepositoryMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mNoteRepositoryMockDelete) Calls() []*NoteRepositoryMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*NoteRepositoryMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *NoteRepositoryMock) MinimockDeleteDone() bool {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteInspect logs each unmet expectation
func (m *NoteRepositoryMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NoteRepositoryMock.Delete with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NoteRepositoryMock.Delete")
		} else {
			m.t.Errorf("Expected call to NoteRepositoryMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		m.t.Error("Expected call to NoteRepositoryMock.Delete")
	}
}

type mNoteRepositoryMockGet struct {
	mock               *NoteRepositoryMock
	defaultExpectation *NoteRepositoryMockGetExpectation
	expectations       []*NoteRepositoryMockGetExpectation

	callArgs []*NoteRepositoryMockGetParams
	mutex    sync.RWMutex
}

// NoteRepositoryMockGetExpectation specifies expectation struct of the NoteRepository.Get
type NoteRepositoryMockGetExpectation struct {
	mock    *NoteRepositoryMock
	params  *NoteRepositoryMockGetParams
	results *NoteRepositoryMockGetResults
	Counter uint64
}

// NoteRepositoryMockGetParams contains parameters of the NoteRepository.Get
type NoteRepositoryMockGetParams struct {
	ctx context.Context
	id  int64
}

// NoteRepositoryMockGetResults contains results of the NoteRepository.Get
type NoteRepositoryMockGetResults struct {
	np1 *model.Note
	err error
}

// Expect sets up expected params for NoteRepository.Get
func (mmGet *mNoteRepositoryMockGet) Expect(ctx context.Context, id int64) *mNoteRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("NoteRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &NoteRepositoryMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &NoteRepositoryMockGetParams{ctx, id}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the NoteRepository.Get
func (mmGet *mNoteRepositoryMockGet) Inspect(f func(ctx context.Context, id int64)) *mNoteRepositoryMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for NoteRepositoryMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by NoteRepository.Get
func (mmGet *mNoteRepositoryMockGet) Return(np1 *model.Note, err error) *NoteRepositoryMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("NoteRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &NoteRepositoryMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &NoteRepositoryMockGetResults{np1, err}
	return mmGet.mock
}

// Set uses given function f to mock the NoteRepository.Get method
func (mmGet *mNoteRepositoryMockGet) Set(f func(ctx context.Context, id int64) (np1 *model.Note, err error)) *NoteRepositoryMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the NoteRepository.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the NoteRepository.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the NoteRepository.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mNoteRepositoryMockGet) When(ctx context.Context, id int64) *NoteRepositoryMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("NoteRepositoryMock.Get mock is already set by Set")
	}

	expectation := &NoteRepositoryMockGetExpectation{
		mock:   mmGet.mock,
		params: &NoteRepositoryMockGetParams{ctx, id},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up NoteRepository.Get return parameters for the expectation previously defined by the When method
func (e *NoteRepositoryMockGetExpectation) Then(np1 *model.Note, err error) *NoteRepositoryMock {
	e.results = &NoteRepositoryMockGetResults{np1, err}
	return e.mock
}

// Get implements repository.NoteRepository
func (mmGet *NoteRepositoryMock) Get(ctx context.Context, id int64) (np1 *model.Note, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, id)
	}

	mm_params := NoteRepositoryMockGetParams{ctx, id}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.np1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_got := NoteRepositoryMockGetParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("NoteRepositoryMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the NoteRepositoryMock.Get")
		}
		return (*mm_results).np1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, id)
	}
	mmGet.t.Fatalf("Unexpected call to NoteRepositoryMock.Get. %v %v", ctx, id)
	return
}

// GetAfterCounter returns a count of finished NoteRepositoryMock.Get invocations
func (mmGet *NoteRepositoryMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of NoteRepositoryMock.Get invocations
func (mmGet *NoteRepositoryMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to NoteRepositoryMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mNoteRepositoryMockGet) Calls() []*NoteRepositoryMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*NoteRepositoryMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *NoteRepositoryMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *NoteRepositoryMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NoteRepositoryMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NoteRepositoryMock.Get")
		} else {
			m.t.Errorf("Expected call to NoteRepositoryMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to NoteRepositoryMock.Get")
	}
}

type mNoteRepositoryMockList struct {
	mock               *NoteRepositoryMock
	defaultExpectation *NoteRepositoryMockListExpectation
	expectations       []*NoteRepositoryMockListExpectation

	callArgs []*NoteRepositoryMockListParams
	mutex    sync.RWMutex
}

// NoteRepositoryMockListExpectation specifies expectation struct of the NoteRepository.List
type NoteRepositoryMockListExpectation struct {
	mock    *NoteRepositoryMock
	params  *NoteRepositoryMockListParams
	results *NoteRepositoryMockListResults
	Counter uint64
}

// NoteRepositoryMockListParams contains parameters of the NoteRepository.List
type NoteRepositoryMockListParams struct {
	ctx context.Context
}

// NoteRepositoryMockListResults contains results of the NoteRepository.List
type NoteRepositoryMockListResults struct {
	na1 []model.Note
	err error
}

// Expect sets up expected params for NoteRepository.List
func (mmList *mNoteRepositoryMockList) Expect(ctx context.Context) *mNoteRepositoryMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("NoteRepositoryMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &NoteRepositoryMockListExpectation{}
	}

	mmList.defaultExpectation.params = &NoteRepositoryMockListParams{ctx}
	for _, e := range mmList.expectations {
		if minimock.Equal(e.params, mmList.defaultExpectation.params) {
			mmList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmList.defaultExpectation.params)
		}
	}

	return mmList
}

// Inspect accepts an inspector function that has same arguments as the NoteRepository.List
func (mmList *mNoteRepositoryMockList) Inspect(f func(ctx context.Context)) *mNoteRepositoryMockList {
	if mmList.mock.inspectFuncList != nil {
		mmList.mock.t.Fatalf("Inspect function is already set for NoteRepositoryMock.List")
	}

	mmList.mock.inspectFuncList = f

	return mmList
}

// Return sets up results that will be returned by NoteRepository.List
func (mmList *mNoteRepositoryMockList) Return(na1 []model.Note, err error) *NoteRepositoryMock {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("NoteRepositoryMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &NoteRepositoryMockListExpectation{mock: mmList.mock}
	}
	mmList.defaultExpectation.results = &NoteRepositoryMockListResults{na1, err}
	return mmList.mock
}

// Set uses given function f to mock the NoteRepository.List method
func (mmList *mNoteRepositoryMockList) Set(f func(ctx context.Context) (na1 []model.Note, err error)) *NoteRepositoryMock {
	if mmList.defaultExpectation != nil {
		mmList.mock.t.Fatalf("Default expectation is already set for the NoteRepository.List method")
	}

	if len(mmList.expectations) > 0 {
		mmList.mock.t.Fatalf("Some expectations are already set for the NoteRepository.List method")
	}

	mmList.mock.funcList = f
	return mmList.mock
}

// When sets expectation for the NoteRepository.List which will trigger the result defined by the following
// Then helper
func (mmList *mNoteRepositoryMockList) When(ctx context.Context) *NoteRepositoryMockListExpectation {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("NoteRepositoryMock.List mock is already set by Set")
	}

	expectation := &NoteRepositoryMockListExpectation{
		mock:   mmList.mock,
		params: &NoteRepositoryMockListParams{ctx},
	}
	mmList.expectations = append(mmList.expectations, expectation)
	return expectation
}

// Then sets up NoteRepository.List return parameters for the expectation previously defined by the When method
func (e *NoteRepositoryMockListExpectation) Then(na1 []model.Note, err error) *NoteRepositoryMock {
	e.results = &NoteRepositoryMockListResults{na1, err}
	return e.mock
}

// List implements repository.NoteRepository
func (mmList *NoteRepositoryMock) List(ctx context.Context) (na1 []model.Note, err error) {
	mm_atomic.AddUint64(&mmList.beforeListCounter, 1)
	defer mm_atomic.AddUint64(&mmList.afterListCounter, 1)

	if mmList.inspectFuncList != nil {
		mmList.inspectFuncList(ctx)
	}

	mm_params := NoteRepositoryMockListParams{ctx}

	// Record call args
	mmList.ListMock.mutex.Lock()
	mmList.ListMock.callArgs = append(mmList.ListMock.callArgs, &mm_params)
	mmList.ListMock.mutex.Unlock()

	for _, e := range mmList.ListMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.na1, e.results.err
		}
	}

	if mmList.ListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmList.ListMock.defaultExpectation.Counter, 1)
		mm_want := mmList.ListMock.defaultExpectation.params
		mm_got := NoteRepositoryMockListParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmList.t.Errorf("NoteRepositoryMock.List got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmList.ListMock.defaultExpectation.results
		if mm_results == nil {
			mmList.t.Fatal("No results are set for the NoteRepositoryMock.List")
		}
		return (*mm_results).na1, (*mm_results).err
	}
	if mmList.funcList != nil {
		return mmList.funcList(ctx)
	}
	mmList.t.Fatalf("Unexpected call to NoteRepositoryMock.List. %v", ctx)
	return
}

// ListAfterCounter returns a count of finished NoteRepositoryMock.List invocations
func (mmList *NoteRepositoryMock) ListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.afterListCounter)
}

// ListBeforeCounter returns a count of NoteRepositoryMock.List invocations
func (mmList *NoteRepositoryMock) ListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.beforeListCounter)
}

// Calls returns a list of arguments used in each call to NoteRepositoryMock.List.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmList *mNoteRepositoryMockList) Calls() []*NoteRepositoryMockListParams {
	mmList.mutex.RLock()

	argCopy := make([]*NoteRepositoryMockListParams, len(mmList.callArgs))
	copy(argCopy, mmList.callArgs)

	mmList.mutex.RUnlock()

	return argCopy
}

// MinimockListDone returns true if the count of the List invocations corresponds
// the number of defined expectations
func (m *NoteRepositoryMock) MinimockListDone() bool {
	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcList != nil && mm_atomic.LoadUint64(&m.afterListCounter) < 1 {
		return false
	}
	return true
}

// MinimockListInspect logs each unmet expectation
func (m *NoteRepositoryMock) MinimockListInspect() {
	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NoteRepositoryMock.List with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListCounter) < 1 {
		if m.ListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NoteRepositoryMock.List")
		} else {
			m.t.Errorf("Expected call to NoteRepositoryMock.List with params: %#v", *m.ListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcList != nil && mm_atomic.LoadUint64(&m.afterListCounter) < 1 {
		m.t.Error("Expected call to NoteRepositoryMock.List")
	}
}

type mNoteRepositoryMockUpdate struct {
	mock               *NoteRepositoryMock
	defaultExpectation *NoteRepositoryMockUpdateExpectation
	expectations       []*NoteRepositoryMockUpdateExpectation

	callArgs []*NoteRepositoryMockUpdateParams
	mutex    sync.RWMutex
}

// NoteRepositoryMockUpdateExpectation specifies expectation struct of the NoteRepository.Update
type NoteRepositoryMockUpdateExpectation struct {
	mock    *NoteRepositoryMock
	params  *NoteRepositoryMockUpdateParams
	results *NoteRepositoryMockUpdateResults
	Counter uint64
}

// NoteRepositoryMockUpdateParams contains parameters of the NoteRepository.Update
type NoteRepositoryMockUpdateParams struct {
	ctx  context.Context
	id   int64
	info *model.UpdateNoteInfo
}

// NoteRepositoryMockUpdateResults contains results of the NoteRepository.Update
type NoteRepositoryMockUpdateResults struct {
	err error
}

// Expect sets up expected params for NoteRepository.Update
func (mmUpdate *mNoteRepositoryMockUpdate) Expect(ctx context.Context, id int64, info *model.UpdateNoteInfo) *mNoteRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("NoteRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &NoteRepositoryMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &NoteRepositoryMockUpdateParams{ctx, id, info}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the NoteRepository.Update
func (mmUpdate *mNoteRepositoryMockUpdate) Inspect(f func(ctx context.Context, id int64, info *model.UpdateNoteInfo)) *mNoteRepositoryMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for NoteRepositoryMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by NoteRepository.Update
func (mmUpdate *mNoteRepositoryMockUpdate) Return(err error) *NoteRepositoryMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("NoteRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &NoteRepositoryMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &NoteRepositoryMockUpdateResults{err}
	return mmUpdate.mock
}

// Set uses given function f to mock the NoteRepository.Update method
func (mmUpdate *mNoteRepositoryMockUpdate) Set(f func(ctx context.Context, id int64, info *model.UpdateNoteInfo) (err error)) *NoteRepositoryMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the NoteRepository.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the NoteRepository.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the NoteRepository.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mNoteRepositoryMockUpdate) When(ctx context.Context, id int64, info *model.UpdateNoteInfo) *NoteRepositoryMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("NoteRepositoryMock.Update mock is already set by Set")
	}

	expectation := &NoteRepositoryMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &NoteRepositoryMockUpdateParams{ctx, id, info},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up NoteRepository.Update return parameters for the expectation previously defined by the When method
func (e *NoteRepositoryMockUpdateExpectation) Then(err error) *NoteRepositoryMock {
	e.results = &NoteRepositoryMockUpdateResults{err}
	return e.mock
}

// Update implements repository.NoteRepository
func (mmUpdate *NoteRepositoryMock) Update(ctx context.Context, id int64, info *model.UpdateNoteInfo) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, id, info)
	}

	mm_params := NoteRepositoryMockUpdateParams{ctx, id, info}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, &mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := NoteRepositoryMockUpdateParams{ctx, id, info}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("NoteRepositoryMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the NoteRepositoryMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, id, info)
	}
	mmUpdate.t.Fatalf("Unexpected call to NoteRepositoryMock.Update. %v %v %v", ctx, id, info)
	return
}

// UpdateAfterCounter returns a count of finished NoteRepositoryMock.Update invocations
func (mmUpdate *NoteRepositoryMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of NoteRepositoryMock.Update invocations
func (mmUpdate *NoteRepositoryMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to NoteRepositoryMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mNoteRepositoryMockUpdate) Calls() []*NoteRepositoryMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*NoteRepositoryMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *NoteRepositoryMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *NoteRepositoryMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NoteRepositoryMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NoteRepositoryMock.Update")
		} else {
			m.t.Errorf("Expected call to NoteRepositoryMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to NoteRepositoryMock.Update")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *NoteRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()

			m.MinimockDeleteInspect()

			m.MinimockGetInspect()

			m.MinimockListInspect()

			m.MinimockUpdateInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *NoteRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *NoteRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteDone() &&
		m.MinimockGetDone() &&
		m.MinimockListDone() &&
		m.MinimockUpdateDone()
}
